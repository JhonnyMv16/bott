/*
‚ö†Ô∏è‚ö†Ô∏è ATEN√á√ÉO ‚ö†Ô∏è‚ö†Ô∏è
Essa vers√£o de software √© paga. Pe√ßo que n√£o divulgue ela
*
Caso divulgue algum comando deixe os cr√©ditos, fazer ele foi desgaste. 
*
Agrade√ßo pela compreens√£o. 

üìù NOTAS:
  * Algumas cases criada por Dark 
  * Total agradecimento e cr√©ditos a ele <3
*/

// API DO ZIP ZOP
require('./config')
const { BufferJSON, WA_DEFAULT_EPHEMERAL, generateWAMessageFromContent, proto, generateWAMessageContent, generateWAMessage, prepareWAMessageMedia, areJidsSameUser, getContentType } = require('@adiwajshing/baileys')
const fs = require('fs')
const util = require('util')
const chalk = require('chalk')
const { exec, spawn, execSync } = require("child_process")
const axios = require('axios')
const path = require('path')
const os = require('os')
const moment = require('moment-timezone')
const { JSDOM } = require('jsdom')
const speed = require('performance-now')
const { performance } = require('perf_hooks')
const { Primbon } = require('scrape-primbon')
const primbon = new Primbon()
const { smsg, formatp, tanggal, formatDate, getTime, isUrl, sleep, clockString, runtime, fetchJson, getBuffer, jsonformat, format, parseMention, getRandom } = require('./lib/myfunc')
const { testElement } = require('domutils')

// CARREGANDO DATABESES

// SISTEMA PREMIUM
let prem2 = ['556796005372', '5511920117861']
// BASTA IR ADICIONANDO OS N√öMEROS 

// SISTEMA GRUPO VIP
const vipGp = [`120363021968976096@g.us`] //pege a id no console ou no comando /chatid
// S√ì IR PONDO OS IDS DO GRUPO VIP


// ALGUMAS DEFINI√á√ïES
module.exports = bat = async (bat, m, chatUpdate, store) => {
    try {
        var body = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ''
        var budy = (typeof m.text == 'string' ? m.text : '')
        var prefix = global.prefa;
        const isCmd = body.startsWith(prefix)
        const command = isCmd ? body.slice(1).trim().split(/ +/).shift().toLocaleLowerCase() : null
        //const isCmd = body.startsWith(prefix) // COMANDOS SEM PREFIX
        //const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase() // COMANDOS SEM PREFIX
        const args = body.trim().split(/ +/).slice(1)
        const pushname = m.pushName || "Sem nome"
        const botNumber = await bat.decodeJid(bat.user.id)
        const isCreator = [botNumber, ...global.owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)
        const itsMe = m.sender == botNumber ? true : false
        const text = q = args.join(" ")
        const quoted = m.quoted ? m.quoted : m
        const mime = (quoted.msg || quoted).mimetype || ''
	    const isMedia = /image|video|sticker|audio/.test(mime)
	
        // DEFINI√á√ïES PARA GRUPO
        const groupMetadata = m.isGroup ? await bat.groupMetadata(m.chat).catch(e => {}) : ''
        const groupName = m.isGroup ? groupMetadata.subject : ''
        const participants = m.isGroup ? await groupMetadata.participants : ''
        const groupAdmins = m.isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
        const groupOwner = m.isGroup ? groupMetadata.owner : ''
    	const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
    	const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
    	const isPremium = isCreator || global.premium.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender) || false
        const isPremium2 = isCreator || prem2.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender) || false
	    const premm2 = isPremium2 ? 's' : 'n' 
	    const isVipGp = m.isGroup ? vipGp.includes(m.chat) : true 
        const gpvipp = isVipGp ? 's' : 'n' 
	    const from = m.key.remoteJid
	
	
	try {
            let isNumber = x => typeof x === 'number' && !isNaN(x)
            let limitUser = isPremium ? global.limitawal.premium : global.limitawal.free
            let user = global.db.data.users[m.sender]
            if (typeof user !== 'object') global.db.data.users[m.sender] = {}
            if (user) {
                if (!isNumber(user.afkTime)) user.afkTime = -1
                if (!('afkReason' in user)) user.afkReason = ''
                if (!isNumber(user.limit)) user.limit = limitUser
            } else global.db.data.users[m.sender] = {
                afkTime: -1,
                afkReason: '',
                limit: limitUser,
            }
    
            let chats = global.db.data.chats[m.chat]
            if (typeof chats !== 'object') global.db.data.chats[m.chat] = {}
            if (chats) {
                if (!('mute' in chats)) chats.mute = false
                if (!('antilink' in chats)) chats.antilink = false
            } else global.db.data.chats[m.chat] = {
                mute: false,
                antilink: false,
            }
		
	    let setting = global.db.data.settings[botNumber]
            if (typeof setting !== 'object') global.db.data.settings[botNumber] = {}
	    if (setting) {
		if (!isNumber(setting.status)) setting.status = 0
		if (!('autobio' in setting)) setting.autobio = false
	    } else global.db.data.settings[botNumber] = {
		status: 0,
		autobio: false,
	    }
	    
        } catch (err) {
            console.error(err)
        }
	    
        // P√öBLICO E PRIVADO
        if (!bat.public) {
            if (!m.key.fromMe) return
        }

        // Enviar mensagem para console && leitura autom√°tica
        if (m.message) {
            bat.sendReadReceipt(m.chat, m.sender, [m.key.id])
            console.log(chalk.black(chalk.bgWhite('[ PESSOA ]')), chalk.black(chalk.bgGreen(new Date)), chalk.black(chalk.bgBlue(budy || m.mtype)) + '\n' + chalk.magenta('=> Local'), chalk.green(pushname), chalk.yellow(m.sender) + '\n' + chalk.blueBright('=> De'), chalk.green(m.isGroup ? pushname : 'Chat Privado', m.chat))
        }
	
	// ESCREVER NA DATABASE A CADA 1 MINUTO
	setInterval(() => {
            fs.writeFileSync('./src/database.json', JSON.stringify(global.db, null, 2))
        }, 60 * 1000)

	// RESETA O LIMITE A CADA 12 HORAS
        let cron = require('node-cron')
        cron.schedule('00 23 * * *', () => {
            let user = Object.keys(global.db.data.users)
            let limitUser = isPremium ? global.limitawal.premium : global.limitawal.free
            for (let jid of user) global.db.data.users[jid].limit = limitUser
            console.log('Limite resetado')
        }, {
            scheduled: true,
            timezone: "America/Sao_Paulo"
        })
        
	// AUTO DEFINI√á√ÉO NA BIO
	if (db.data.settings[botNumber].autobio) {
	    let setting = global.db.data.settings[botNumber]
	    if (new Date() * 1 - setting.status > 1000) {
		let uptime = await runtime(process.uptime())
		await bat.setStatus(`${bat.user.name} | Tempo iniciado : ${runtime(uptime)}`)
		setting.status = new Date() * 1
	    }
	}
	    
	  // ANTI LINK
        if (db.data.chats[m.chat].antilink) {
        if (budy.match(`chat.whatsapp.com`)) {
        if (!isBotAdmins) return m.reply(`n√£o sou admin rlx T_T`)
        let gclink = (`https://chat.whatsapp.com/`+await bat.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return m.reply(`„Äå ANTI LINK „Äç\n\nrlx vc enviou um link do grupo, por conta disto eu n√£o irei te banir.`)
        if (isAdmins) return //m.reply(`voc√™ √© um administrador`)
        if (isCreator) return //m.reply(`voc√™ √© o dono do meu bot`)
        bat.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
        }
        }
        
      // MUTAR CHATS
      if (db.data.chats[m.chat].mute && !isAdmins && !isCreator) {
      return
      }

        // RESPOSTA DO COMANDO COM M√çDIA 
        if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.data.sticker)) {
        let hash = global.db.data.sticker[m.msg.fileSha256.toString('base64')]
        let { text, mentionedJid } = hash
        let messages = await generateWAMessage(m.chat, { text: text, mentions: mentionedJid }, {
            userJid: bat.user.id,
            quoted: m.quoted && m.quoted.fakeObj
        })
        messages.key.fromMe = areJidsSameUser(m.sender, bat.user.id)
        messages.key.id = m.key.id
        messages.pushName = m.pushName
        if (m.isGroup) messages.participant = m.sender
        let msg = {
            ...chatUpdate,
            messages: [proto.WebMessageInfo.fromObject(messages)],
            type: 'append'
        }
        bat.ev.emit('messages.upsert', msg)
        }
	
	    
	    let mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
	    for (let jid of mentionUser) {
            let user = global.db.data.users[jid]
            if (!user) continue
            let afkTime = user.afkTime
            if (!afkTime || afkTime < 0) continue
            let reason = user.afkReason || ''
            m.reply(`
N√£o o marque!
Ele est√° em AFK ${reason ? 'com raz√£o ' + reason : 'sem raz√£o kkk'}
No decorrer ${clockString(new Date - afkTime)}
`.trim())
        }

        if (db.data.users[m.sender].afkTime > -1) {
            let user = global.db.data.users[m.sender]
            m.reply(`
Voc√™ saiu do AFK${user.afkReason ? ' depois de ' + user.afkReason : ''}
No decorrer ${clockString(new Date - user.afkTime)}
`.trim())
            user.afkTime = -1
            user.afkReason = ''
        }
	    
        switch(command) {



            case 'sticker': case 's': case 'f': case 'sgif': {
               // if (!m.isGroup) throw `esse tipo de comando √© exclusivo do grupo iris:\n\nhttps://chat.whatsapp.com/DUP9VTCuRin2NHFjYqYbZN`
                if (!quoted) throw `Marque um video ou imagem com o comando ${prefix + command}`
                m.reply(mess.wait)
                        if (/image/.test(mime)) {
                    let media = await quoted.download()
                    let encmedia = await bat.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
                    await fs.unlinkSync(encmedia)
                } else if (/video/.test(mime)) {
                    if ((quoted.msg || quoted).seconds > 11) return m.reply('Marque um video de at√© 10 segundos!')
                    let media = await quoted.download()
                    let encmedia = await bat.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
                    await fs.unlinkSync(encmedia)
                } else {
                    throw `Hmmm possivel erro, marque um video ou foto com o comando ${prefix + command}\nO video tem que durar 9 segundos`
                    }
                }
                break
              case 'renomear': {
               if (!isCreator) throw mess.owner
		      //if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
               if (!text) throw `Examplo de uso : ${prefix + command} packname|author`
          global.packname = text.split("|")[0]
          global.author = text.split("|")[1]
          m.reply(`Descri√ß√£o foi alterada com sucesso para\n\n‚≠î Packname : ${global.packname}\n‚≠î Autor : ${global.author}`)
            }
            break
            case 'setplano': {
                if (!isCreator) throw mess.owner
                //if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
                if (!text) throw `Examplo de uso : ${prefix + command} üü¢ 07 DIAS = R$ 10,00
üü¢ 30 DIAS = R$ 20,00 |üü¢ 07 DIAS = R$ 20,00
üü¢ 15 DIAS = R$ 30,00
üü¢ 30 DIAS = R$ 45,00`
           global.precopv = text.split("|")[0]
           global.precogrupo = text.split("|")[1]
           m.reply(`üõ† Descri√ß√£o de pre√ßos foi alterada com sucesso:\n\nüë§ Para privados : \n${global.precopv}\nüë• Para grupos : \n${global.precogrupo}`)
             }
             break
            case 'play': case 'ytplay': {
                //if (!m.isGroup) throw `esse tipo de comando √© exclusivo do grupo iris:\n\nhttps://chat.whatsapp.com/DUP9VTCuRin2NHFjYqYbZN`
                if (!text) throw `Example : ${prefix + command} pablo vitar seu amor me pegou`
                let yts = require("yt-search")
                let search = await yts(text)
                let dow = search.videos[Math.floor(Math.random() * search.videos.length)]
                let buttons = [
                    {buttonId: `${prefix}ytmp3 ${dow.url}`, buttonText: {displayText: '‚ô´ Audio'}, type: 1},
                    {buttonId: `${prefix}ytmp4 ${dow.url}`, buttonText: {displayText: '‚ñ∫ Video'}, type: 1}
                ]
                let buttonMessage = {
                    image: { url: dow.thumbnail },
                    caption: `
            ‚úèÔ∏è T√≠tulo: ${dow.title}
            ‚åõ Dura√ß√£o: ${dow.timestamp}
            üëÅ‚Äçüó® Visualiza√ß√µes : ${dow.views}
            üìÖ Data De Envio: ${dow.ago}
            üé≠ Autor : ${dow.author.name}
            üë§ Canal: ${dow.author.url}
            üé∂ Descri√ß√£o : ${dow.description}
            üîó Url : ${dow.url}`,
                    footer: `üé∂ Usuario: ${m.pushName}`,
                    buttons: buttons,
                    headerType: 4
                }
                bat.sendMessage(m.chat, buttonMessage, { quoted: m })
            }
            break
            case 'ytmp3': case 'ytaudio': {
                if (!m.isGroup) throw `esse tipo de comando √© exclusivo do grupo iris:\n\nhttps://chat.whatsapp.com/D9VTCuRin2NHFjYqYbZN`
                let { yta } = require('./lib/y2mate')
                if (!text) throw `Example : ${prefix + command} https://youtube.com/watch?v=PtFMh6Tccag%27 128kbps`
                let quality = args[1] ? args[1] : '128kbps'
                let media = await yta(text, quality)
                if (media.filesize >= 100000) return m.reply('Arquivo acima do limite '+util.format(media))
                bat.sendImage(m.chat, media.thumb, `‚≠î Titulo : ${media.title}\n‚≠î File Size : ${media.filesizeF}\n‚≠î Url : ${isUrl(text)}\n‚≠î Ext : MP3\n‚≠î Resolu√ß√£o : ${args[1] || '128kbps'}`, m)
                bat.sendMessage(m.chat, { audio: { url: media.dl_link }, mimetype: 'audio/mpeg', fileName: `${media.title}.mp3` }, { quoted: m })
            }
            break
            case 'ytmp4': case 'ytvideo': {
                if (!m.isGroup) throw `esse tipo de comando √© exclusivo do grupo iris:\n\nhttps://chat.whatsapp.com/DUP9CuRin2NHFjYqYbZN`
                let { ytv } = require('./lib/y2mate')
                if (!text) throw `Exemplo : ${prefix + command} https://youtube.com/watch?v=PtFMh6Tccag%27 360p`
                let quality = args[1] ? args[1] : '360p'
                let media = await ytv(text, quality)
                if (media.filesize >= 100000) return m.reply('Arquivo acima do limite '+util.format(media))
                bat.sendMessage(m.chat, { video: { url: media.dl_link }, mimetype: 'video/mp4', fileName: `${media.title}.mp4`, caption: `‚≠î Titulo : ${media.title}\n‚≠î File Size : ${media.filesizeF}\n‚≠î Url : ${isUrl(text)}\n‚≠î Ext : MP3\n‚≠î Resolu√ß√£o : ${args[1] || '360p'}` }, { quoted: m })
            }
            break
            
            
            //----------------------------- FIM ------------------------------\\
            
            
                    // menu2 de comandos extras
                            case 'menu2':
                            m.reply('‚îè‚îÅ„ÄåüöÄ *TODOS*„Äç‚îÅ‚îì\n*‚îÉ ‚Ä¢* /Planos\n*‚îÉ ‚Ä¢* /Afk\n*‚îÉ ‚Ä¢* /Listchat\n*‚îÉ ‚Ä¢* /Listgp\n*‚îÉ ‚Ä¢* /Check\n*‚îÉ ‚Ä¢* /Id\n*‚îÉ ‚Ä¢* /Wame\n*‚îÉ ‚Ä¢* /Chatid\n*‚îÉ ‚Ä¢* /Ping\n*‚îÉ ‚Ä¢* /Delete\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n\n‚îè‚îÅ„Äåüí¨ *GRUPOS*„Äç‚îÅ‚îì\n*‚îÉ ‚Ä¢* /Marcar \n*‚îÉ ‚Ä¢* /Online \n*‚îÉ ‚Ä¢* /Leave \n*‚îÉ ‚Ä¢* /Antilink \n*‚îÉ ‚Ä¢* /Grupo \n*‚îÉ ‚Ä¢* /Anunciar \n*‚îÉ ‚Ä¢* /Ban \n*‚îÉ ‚Ä¢* /TempBan \n*‚îÉ ‚Ä¢* /Add \n*‚îÉ ‚Ä¢* /Promote \n*‚îÉ ‚Ä¢* /Demote \n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n\n‚îè‚îÅ„Äåüîé *CONSULTAS*„Äç‚îÅ‚îì\n*‚îÉ ‚Ä¢* /Tel (1, 2 e 3)\n*‚îÉ ‚Ä¢* /Placa\n*‚îÉ ‚Ä¢* /Cnpj\n*‚îÉ ‚Ä¢* /Nome\n*‚îÉ ‚Ä¢* /Site\n*‚îÉ ‚Ä¢* /Cpf (1, 2, 3 e 4)\n*‚îÉ ‚Ä¢* /Cep\n*‚îÉ ‚Ä¢* /Bin\n*‚îÉ ‚Ä¢* /Ip\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n\n‚îè‚îÅ„Äåüë§ *DONO*„Äç‚îÅ‚îì\n*‚îÉ ‚Ä¢* /Privado\n*‚îÉ ‚Ä¢* /Send\n*‚îÉ ‚Ä¢* /Sendgp\n*‚îÉ ‚Ä¢* /Publico\n*‚îÉ ‚Ä¢* /Join\n*‚îÉ ‚Ä¢* /Unblock\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ')
                            break
                        
                            case 'donate': case 'contratar': case 'criador': case 'owner': case '1234aaaaadonate': {
                                bat.sendMessage(m.chat, { image: { url: 'https://i.ibb.co/DpfFKvt/IMG-20220213-WA0024.jpg' }, caption: `üîÜ - *Ol√° ${m.pushName}*,\nDesde j√° obriado por querer me contratar!\n\n‚úÖ - *Para contratar um dos meus planos fale com meu dono:*\n\nhttps://wa.me/5567996005372` }, { quoted: m })
                            }
                            break
                            case 'afk': {
                                let user = global.db.data.users[m.sender]
                                user.afkTime = + new Date
                                user.afkReason = text
                                m.reply(`${m.pushName} Entrou em modo afk${text ? ': ' + text : ''}`)
                            }
                            break	
                
                        
            //----------------------------- COMANDOS DE ADMNISTRA√á√ÉO ------------------------------\\

            
            case 'marcar': {    
                if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
let teks = `‚ïê‚ïê‚ú™„Äò *üë• Marquei geral* „Äô‚ú™‚ïê‚ïê
 
 ‚û≤ *frase: ${q ? q : 'eu sou s√≥ um bot ;-;'}*\n\n`
                for (let mem of participants) {
                teks += `‚≠î @${mem.id.split('@')[0]}\n`
                }
                bat.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
                }
                break
                case 'hide': case 'anunciar':{
                    if (!m.isGroup) throw mess.group
                    if (!isBotAdmins) throw mess.botAdmin
                    if (!isAdmins) throw mess.admin
            bat.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
            }
            break
            case 'tempban': {
                    if (!m.isGroup) throw mess.group
                    if (!isBotAdmins) throw mess.botAdmin
                    if (!isAdmins) throw mess.admin
                    let users4 = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
                await bat.groupParticipantsUpdate(m.chat, [users4], 'remove').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
           m.reply(`Pronto, em 5 minutos eu ja adiciono essa pessoa de volta ao grupo, isso se ela n√£o tiver privado...`)
                await sleep(300000)
           await bat.groupParticipantsUpdate(m.chat, [users4], 'add').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
            }
            break


	case 'kick': case 'ban': {
        //if (!isCreator) throw 'comando exclusivo para meu dono'
		if (!m.isGroup) throw mess.group
        if (!isBotAdmins) throw ("como  vou fzr isso se eu nem sou adm?")
        if (!isAdmins) throw mess.admin
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		if (botNumber.includes(users)) return m.reply('Por qu√™ est√° tentando me banir???')
        //if (ownerNumber.includes(users)) return m.reply('Banindo meu dono?')
        await bat.groupParticipantsUpdate(m.chat, [users], 'remove').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
	}
	break

	case 'add': {
		if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
		let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await bat.groupParticipantsUpdate(m.chat, [users], 'add').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
	}
	break
	case 'promote': {
		if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins && !isCreator) throw mess.admin
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace('üëÆ‚Äç‚ôÇÔ∏è Mais um com poderes administrativos admnistrativos')
		await bat.groupParticipantsUpdate(m.chat, [users], 'promote').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
	}
	break
	case 'demote': {
		if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await bat.groupParticipantsUpdate(m.chat, [users], 'demote').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
	}
	break
        case 'unblock': {
		if (!isCreator) throw ("comando exclusivo para meu dono")
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await bat.updateBlockStatus(users, 'unblock').then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
	}
	break
	case 'delete': case 'del': case 'd': case 'apagar': {
                if (!m.quoted) throw false
                let { chat, fromMe, id, isBaileys } = m.quoted
                if (!isBaileys) throw 'Mencione uma mensagem do bot para ser deletada!'
                bat.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
			
	

            case 'antilink': {
                if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
                if (args[0] === "on") {
                if (db.data.chats[m.chat].antilink) return m.reply(`j√° est√° ativo`)
                db.data.chats[m.chat].antilink = true
                m.reply(`Antilink ativo !`)
                } else if (args[0] === "off") {
                if (!db.data.chats[m.chat].antilink) return m.reply(`j√° est√° desativado`)
                db.data.chats[m.chat].antilink = false
                m.reply(`Antilink inativo!`)
                } else {
                 let buttons = [
                        { buttonId: `${prefix}antilink on`, buttonText: { displayText: 'ATIVAR ‚úÖ' }, type: 1 },
                        { buttonId: `${prefix}antilink off`, buttonText: { displayText: 'DESATIVAR ‚úÖ' }, type: 1 }
                    ]
                    await bat.sendButtonText(m.chat, buttons, `Modo Antilink`, bat.user.name, m)
                }
             }
             break
             case 'mute': {
                if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
                if (args[0] === "on") {
                if (db.data.chats[m.chat].mute) return m.reply(`j√° est√° ativo`)
                db.data.chats[m.chat].mute = true
                m.reply(`${bat.user.name} foi silenciado neste grupo!`)
                } else if (args[0] === "off") {
                if (!db.data.chats[m.chat].mute) return m.reply(`j√° est√° desativado`)
                db.data.chats[m.chat].mute = false
                m.reply(`${bat.user.name} foi ativado neste grupo!`)
                } else {
                 let buttons = [
                        { buttonId: `${prefix}mute on`, buttonText: { displayText: 'ATIVAR ‚úÖ' }, type: 1 },
                        { buttonId: `${prefix}mute off`, buttonText: { displayText: 'DESATIVAR ‚úÖ' }, type: 1 }
                    ]
                    await bat.sendButtonText(m.chat, buttons, `Mutar o Bot no grupo`, bat.user.name, m)
                }
             }
             break
            case 'group': case 'grupo': {
                if (!m.isGroup) throw mess.group
                if (!isBotAdmins) throw mess.botAdmin
                if (!isAdmins) throw mess.admin
                if (args[0] === 'close'){
                    await bat.groupSettingUpdate(m.chat, 'announcement').then((res) => m.reply(`Grupo fechado com sucesso ü•±`)).catch((err) => m.reply(jsonformat(err)))
                } else if (args[0] === 'open'){
                    await bat.groupSettingUpdate(m.chat, 'not_announcement').then((res) => m.reply(`grupo aberto com sucesso üöÄ`)).catch((err) => m.reply(jsonformat(err)))
                } else {
                let buttons = [
                        { buttonId: `${prefix}group open`, buttonText: { displayText: 'ABRIR ‚úÖ' }, type: 1 },
                        { buttonId: `${prefix}group close`, buttonText: { displayText: 'FECHAR ‚úÖ' }, type: 1 }
                    ]
                    await bat.sendButtonText(m.chat, buttons, `Mode Group`, bat.user.name, m)

             }
            }
            break

            case 'linkgp': case 'link': {
                if (!m.isGroup) throw mess.group
                let response = await bat.groupInviteCode(m.chat)
                bat.sendText(m.chat, `https://chat.whatsapp.com/${response}\n\nLink Group : ${groupMetadata.subject}`, m, { detectLink: true })
            }
            break

            case 'delete': case 'del': case 'd': case 'apagar': {
                if (!m.quoted) throw false
                let { chat, fromMe, id, isBaileys } = m.quoted
                if (!isBaileys) throw 'Mencione uma mensagem do bot para ser deletada!'
                bat.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
			
            
            case 'join': {
                if (!isCreator) throw 'comando exclusivo para meu dono'
                if (!text) throw 'falta o link do grupo!'
                if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) throw 'Link Invalido!'
                m.reply('espere meu nobre')
                let result = args[0].split('https://chat.whatsapp.com/')[1]
                await bat.groupAcceptInvite(result).then((res) => console.log(jsonformat(res))).catch((err) => console.log(jsonformat(err)))
            }
            break


            case 'bcgc': case 'sendgp': {
                if (!isCreator) throw mess.owner
                if (!text) throw `Cad√™ o testo? kkkk\n\nExemplo : ${prefix + command} adm est√° com fimose aindaüò¢`
                let getGroups = await bat.groupFetchAllParticipating()
                let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
                let maw = groups.map(v => v.id)
                m.reply(`Enviando transmiss√£o para ${maw.length} Chat\nTempo de conclus√£o ${maw.length} segundos`)
                for (let i of maw) {
                    await sleep(1500)
                    let btn = [{
                        urlButton: {
                            displayText: 'Meu grupo üîÜ',
                            url: 'https://chat.whatsapp.com/FeBFBymIjuj39NWD94i5Ob'
                        }
                    }, {
                        quickReplyButton: {
                            displayText: 'CONSULTAS üîé',
                            id: `${prefix}consultas`
                        }
                    }]
                      let txt = `„Äå TRANSMISS√ÉO - HIDRA „Äç\n\n${text}`
                      bat.send5ButImg(i, txt, bat.user.name, global.thumb, btn)
                    }
                m.reply(`Transmiss√£o enviada para o grupo ${maw.length}`)
            }
            break
            case 'bc': case 'transmitir': case 'send': {
                if (!isCreator) throw mess.owner
                if (!text) throw `Cad√™ o testo? kkkk\n\nExemplo : ${prefix + command} adm est√° com fimose aindaüò¢`
                let maw = await store.chats.all().map(v => v.id)
               m.reply(`Enviando transmiss√£o para ${maw.length} Chat\nTempo de conclus√£o ${maw.length} segundos`)

		for (let yoi of maw) {
		    await sleep(1500)
		    let btn = [{
                    urlButton: {
                        displayText: 'Meu grupo üîÜ',
                        url: 'https://chat.whatsapp.com/FeBFBymIjuj39NWD94i5Ob'
                    }
                }, {
                    quickReplyButton: {
                        displayText: 'CONSULTAS üîé',
                        id: `${prefix}consultas`
                    }
                }]
                      let txt = `„Äå TRANSMISS√ÉO - HIDRA „Äç\n\n${text}`
                      bat.send5ButImg(yoi, txt, bat.user.name, global.thumb, btn)
		}
		m.reply('BroadCast concluidaü•±')
            }
            break

            case 'leave': {
                if (!isCreator) throw mess.owner
                await bat.groupLeave(m.chat).then((res) => m.reply(jsonformat(res))).catch((err) => m.reply(jsonformat(err)))
            }
            break
            
            
            case 'listchat': {
                 let maw = await store.chats.all().filter(v => v.id.endsWith('.net')).map(v => v.id)
                 let teks = `‚¨£ *LISTA DE PRIVADOS*\n\nTotal Chat : ${maw.length} Chat\n\n`
                 for (let i of maw) {
                     let nama = store.messages[i].array[0].pushName
                     teks += `‚¨° *Nome :* ${nama}\n‚¨° *Criador :* @${i.split('@')[0]}\n‚¨° *Chat :* https://wa.me/${i.split('@')[0]}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`
                 }
                 bat.sendTextWithMentions(m.chat, teks, m)
             }
             break
                case 'listgp': {
                 let maw = await store.chats.all().filter(v => v.id.endsWith('@g.us')).map(v => v.id)
                 let teks = `‚¨£ *LISTA DE GRUPOS*\n\nTotal de Grupos : ${maw.length} Grupo\n\n`
                 for (let i of maw) {
                     let metadata = await bat.groupMetadata(i)
                     teks += `‚¨° *Nome :* ${metadata.subject}\n‚¨° *Criador :* @${metadata.owner.split('@')[0]}\n‚¨° *ID :* ${metadata.id}\n‚¨° *Faz :* ${moment(metadata.creation * 1000).tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}\n‚¨° *Membro :* ${metadata.participants.length}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`
                 }
                 bat.sendTextWithMentions(m.chat, teks, m)
             }
             break

             case 'check':
                if(!isPremium2) {
                  m.reply(`N√£o, voc√™ n√£o est√° na lista de usu√°rios premium.`)
                } else {
                    m.reply(`Sim, voc√™ est√° na lista de usu√°rios premium!`)
                }
                break
                case 'onlines': case 'liston': case 'online': {
                    let id = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : m.chat
                    let online = [...Object.keys(store.presences[id]), botNumber]
                    bat.sendText(m.chat, 'Lista de Onlines:\n\n' + online.map(v => '‚≠î @' + v.replace(/@.+/, '')).join`\n`, m, { mentions: online })
             }
             break
            case 'publico': {
                if (!isCreator) throw mess.owner
                bat.public = true
                m.reply('Mudan√ßa bem-sucedida para uso p√∫blico - todos podem me usar')
            }
            break
            case 'privado': {
                if (!isCreator) throw mess.owner
                bat.public = false
                m.reply('Mudan√ßa bem-sucedida para uso privado - apenas meu dono pode me usar')
            }
            break
			

	    case 'wame':
                m.reply(`wa.me/${m.sender.split('@')[0]} - *${pushname}*`)
                break

           case 'id':
                m.reply(m.sender)
                break
           case 'chatid':
                m.reply(m.chat)
                break
            

//----------------------------- CONSULTAS E MENU's ------------------------------\\
case 'consultas':
const sections = [
    {
	title: "CONSULTAS DE TELFONE:",
	rows: [
	    {title: "Tel", rowId: `${prefix}tel`, description: "Puxada de telefone basica ‚òï"},
	    {title: "Tel2", rowId: `${prefix}tel2`, description: "Puxada mais detalhada üî•"},
        {title: "Tel3", rowId: `${prefix}tel3`, description: "Puxada por marca√ß√£o üÜï"}
	]
    },
   {
	title: "CONSULTAS DIVERSAS",
	rows: [
	    {title: "Cnpj", rowId: `${prefix}cnpj`, description: "Puxada completa de cnpj üöÄ"},
	    {title: "Placa", rowId: `${prefix}placa`, description: "Puxada completa de placas üî•"},
	    {title: "Nome", rowId: `${prefix}nome`, description: "Puxada simples de nome üë§"}
	]
    },
   {
	title: "CONSULTAS DE CPF:",
	rows: [
	    {title: "Cpf1", rowId: `${prefix}cpf1`, description: "Puxada de cpf comum ‚òï"},
	    {title: "Cpf2", rowId: `${prefix}cpf2`, description: "puxada de cpf detalhada üîé"},
	    {title: "Cpf3", rowId: `${prefix}cpf3`, description: "puxada de cpf avan√ßada com score üî•"},
	    {title: "Cpf4", rowId: `${prefix}cpf3`, description: "puxada de cpf full üÜï"}
	]
    },
    {
	title: "CONSULTAS GR√ÅTIS:",
	rows: [
	    {title: "Cep", rowId: `${prefix}cep`, description: "Puxada de cep üè°"},
	    {title: "Site", rowId: `${prefix}site`, description: "Puxada de ip - site üîó"},
	    {title: "Ip", rowId: `${prefix}ip`, description: "Puxada de ip ‚Ñπ"},
	    {title: "Bin", rowId: `${prefix}bin`, description: "Puxada de bin üí≥"}
	]
    },
]

const listMessage = {
  text: "Esse √© o menu em lista feito para facilitar a sua vida!\nPara o comando funcionar, selecione e envie o menu que quer abrir!",
  footer: "_*¬© By: Hidra*_",
  title: "CLIQUE NO MENU E SELECIONE SUA CONSULTA üöÄ",
  buttonText: "·¥Ñ·¥è…¥Íú±·¥ú ü·¥õ·¥ÄÍú± ·¥Ö…™Íú±·¥ò·¥è…¥…™·¥†·¥á…™Íú±",
  sections
}

const sendMsg = await bat.sendMessage(m.chat, listMessage)
break
            case 'plano': case 'planos': {
                let buttonse = [
                    {buttonId: `${prefix}contratar`, buttonText: {displayText: 'CONTRATAR PLANOS üí≤'}, type: 1}
                ]
                let buttonMessagee = {
                    text: `‚òëÔ∏è ùó£ùóüùóîùó°ùó¢ùó¶ ùóò ùó©ùóîùóüùó¢ùó•ùóòùó¶

(‚úÖ) Estou equipado com checkers
(‚úÖ) Consultas
(‚úÖ) Comandos para grupos
(‚úÖ) E convers√µes

üîò Escolha um plano e selecione uma forma de pagamento abaixo.

üë§ PLANOS  INDIVIDUAIS

${global.precopv}

üë• PLANOS PARA GRUPOS

${global.precogrupo}

üí∞ FORMAS DE PAGAMENTO

üü¢ MERCADO PAGO
üü¢ BOLETO
üü¢ PIX`,
                    footer: '~ Bot by Hidra',
                    buttons: buttonse,
                    headerType: 2
                }
                bat.sendMessage(m.chat, buttonMessagee)
            }
            break

    
       case 'placa':
    case 'plac':
    if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    if(!isPremium2) throw ("üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar")
    if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
    if(!text) throw (`Digite uma placa. | Exemplo: /placa JYE9708`)
    var query = text
    if(query.length < 7 || query.length > 11) return m.reply('ERRO\nA placa deve conter 7 d√≠gitos!\nUso: /placa JYE9708');
    m.reply(`Opa ${pushname}, j√° estou consutando, aguarde...`)
    xx = await fetchJson(`https://k-a.herokuapp.com/api/consultas/placa?texto=${encodeURIComponent(query)}&apikey=${apiConsulta}`)
if (xx.Placa != undefined) {
retorno = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüïµÔ∏è  CONSULTA REALIZADA  üïµÔ∏è\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n‚Ä¢ PLACA: ${xx.Placa}\n‚Ä¢ SITUA√á√ÉO: ${xx.Situa√ß√£o}\n\n‚Ä¢ MARCA: ${xx.MarcaModelo}\n‚Ä¢ COR: ${xx.Cor}\n‚Ä¢ DATA DE FABRICA√á√ÉO: ${xx.AnoFabrica√ß√£o}\n\n‚Ä¢ MUNICIPIO: ${xx.Cor}\n‚Ä¢ ESTADO: ${xx.Cor}\n‚Ä¢ CHASSI: ${xx.Chassi}\n\n‚Ä¢ RENAVAM: ${xx.Renavam}\n‚Ä¢ UF FATURADO: ${xx.UfFaturado}\n\n‚Ä¢ TIPO VEICULO: ${xx.TipoVeiculo}\n‚Ä¢ ESPECIE: ${xx.Especie}\n‚Ä¢ CATEGORIA: ${xx.Categoria}\n‚Ä¢ COMBUSTIVEL: ${xx.Combustivel}\n\n‚Ä¢ POTENCIA: ${xx.Potencia}\n‚Ä¢ CILINDRADAS: ${xx.Cilindradas}\n‚Ä¢ NACIONALIDADE: ${xx.Nacionalidade}\n‚Ä¢ CAPACIDADE MAXIMA: ${xx.QuantidadeDePassageiros}\n‚Ä¢ QUANTIDADE EIXOS: ${xx.QuantidadeEixos}\n\n‚Ä¢ ATUALIZA√á√ÉO: ${xx.Atualiza√ß√£oVeiculo}\n‚Ä¢ ROUBO/FURTO: ${xx.RouboFurto}\n‚Ä¢ REMARCA√á√ÉO CHASSI: ${xx.Remarca√ß√£oChassi}\n\n‚Ä¢ LICENCIAMENTO: ${xx.Licenciamento}\n‚Ä¢ EMISS√ÉO CRV: ${xx.Emiss√£oUltimoCrv}\n\n‚Ä¢ NOME: ${xx.Nome}\n‚Ä¢ CPF/CNPJ: ${xx.CpfCnpj}\n\n‚Ä¢ Usuario: ${pushname}\n\nüîõ BY: ${nBot}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(retorno)
} else {
m.reply(`‚ö†Ô∏è PLACA N√ÉO ENCONTRADA!`)
}
break

    case 'nome':
case 'puxarnome':
if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
    if(args.length < 1) return m.reply('‚úÖ Para usar esse comando use /nome + o nome da pessoa.');
    m.reply(`Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`);
if (!q) bat.sendMessage(from, {text: `Qual o nome da pessoa?`}, {quoted: mek})
bat.sendMessage(from, {text: `üîç Consultando, aguarde...`}, {quoted: mek})
await axios.get(`https://api.i-find.dev/?token=b4ded580-a8a6-4d66-9f03-93a26426391d&nome=${encodeURIComponent(q)}`).then(anu => {

sexo = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç  *CONSULTA REALIZADA*  üîé
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`

for(let i of anu.data)
sexo += `
NOME: ${i.Nome}
CPF: ${i.Cpf}
G√äNERO: ${i.Genero}
DATA DE NASCIMENTO: ${i.Nascimento}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
sexo += `üë§ Usu√°rio: ${pushname}

üîõ BY: ${nBot}`;
bat.sendMessage(from, {text: sexo}, {quoted: mek});
}).catch(err => {
m.reply(`_* ‚ùóComando com problemas, tente novamente ou contate meu criador ‚ùó*_`);
console.log('Error : %s', color(err, 'red'))
})
break
                    /*case 'nome':
                    
   		            if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
                    if(args.length < 1) return m.reply('‚úÖ Para usar esse comando use /nome + o nome da pessoa.');
		    m.reply(`Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`);
                    xx = await fetchJson(`https://k-a.herokuapp.com/api/consultas/nome/${text}/hidra`)
                    if (xx.Cpf != undefined) {
                        consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üïµÔ∏è  CONSULTA REALIZADA  üïµÔ∏è
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

INFORMA√á√ïES:
                    
‚Ä¢ NOME: ${xx.Nome}
‚Ä¢ CPF: ${xx.Cpf} 
‚Ä¢ SEXO: ${xx.Sexo} 
‚Ä¢ NASCIMENTO: ${xx.Nascimento} 

_(somente 1 resultado pois estou em manuten√ß√£o)_

para apagar esta consulta digite /d
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
                    m.reply(consulta)
} else {
    m.reply(`‚ö†Ô∏è NOME N√ÉO ENCONTRADO!`)
}
                      break*/


// O COMANDO DE CNPJ EST√Å ASSIM POIS FIQUEI COM PREGUI√áA DE CODAR, CASO QUEIRA ME AJUDAR, CODA ELE E ME MANDA, IREI COLOCAR OS CR√âDITOS <3
case 'cnpj':
if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
if(!isPremium2 && !m.isGroup) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
    if(!text) return m.reply (`por favor digite um cnpj`)
                var query = text
                .split('+').join('')
                .split('-').join('')
                .split(' ').join('')
                .split('(').join('')
                .split(')').join('');
                m.reply(`Aguarde ${pushname}, estou consultando os dados...`)
                if(query.length < 11) return m.reply('Isso n√£o √© um cnpj v√°lido;-;');
    res = await axios(`https://www.receitaws.com.br/v1/cnpj/${encodeURIComponent(query)}`);
keys = Object.keys(res.data);
a = '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüîç *CONSULTA DE CNPJ* üîç\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n';
keys.map(function (i) {
	a += `${i}: ${typeof res.data[i] === 'object' ? '' : res.data[i]}\n`;
});
m.reply(a + `\nüë§ *Usuario:* ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
                break


            
                case 'site':
                if(args.length < 1) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùó¶ùóúùóßùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta a url de um SITE, obt√©m dados do site, como qual \n√© o ip, ip reverso, provedor, pa√≠s, estado, cidade e as\ncoordenadas de onde ele est√° localizado.\n\nFormato:\nhttp://google.com\nou\ngoogle.com\n\n/site google.com\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                var query = q
                .split('http://').join('')
                .split('https://').join('')
                .split(' ').join('');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...`)
                hehe = await fetchJson(`http://ip-api.com/json/${encodeURIComponent(query)}`)
 
        if (hehe.country != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç *CONSULTA DE SITE* üîç
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚Ä¢ *Pa√≠s:* ${hehe.country}
‚Ä¢ *Sigla:* ${hehe.countryCode}
‚Ä¢ *Regi√£o:* ${hehe.regionName}
‚Ä¢ *Sigla Regi√£o:* ${hehe.regionName}
‚Ä¢ *Cidade:* ${hehe.city}
‚Ä¢ *Cep:* ${hehe.zip}
‚Ä¢ *Lat:* ${hehe.lat}
‚Ä¢ *Lon:* ${hehe.lon}
‚Ä¢ *Fuso Hor√°rio:* ${hehe.timezone}
‚Ä¢ *Net:* ${hehe.isp}

üë§ *Usuario:* ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
await sleep(800)
await bat.sendMessage(m.chat, { location: { degreesLatitude: hehe.lat, degreesLongitude: hehe.lon }, })
} else {
    m.reply(`‚ö†Ô∏è SITE N√ÉO ENCONTRADO`)
}

  break


                           case 'ip':
    if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóúùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta o n√∫mero de IP, obt√©m dados do IP, como qual √© o provedor, ip reverso, pa√≠s, estado, cidade e as coordenadas de onde ele est√° localizado.\n\nFormato:\n204.152.203.157\n\n/ip 204.152.203.157\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 6) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóúùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta o n√∫mero de IP, obt√©m dados do IP, como qual √© o provedor, ip reverso, pa√≠s, estado, cidade e as coordenadas de onde ele est√° localizado.\n\nFormato:\n204.152.203.157\n\n/ip 204.152.203.157\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóúùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta o n√∫mero de IP, obt√©m dados do IP, como qual √© o provedor, ip reverso, pa√≠s, estado, cidade e as coordenadas de onde ele est√° localizado.\n\nFormato:\n204.152.203.157\n\n/ip 204.152.203.157\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                hehe = await fetchJson(`http://ip-api.com/json/${text}`)
 
        if (hehe.country != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç *CONSULTA DE IP* üîç
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚Ä¢ *Pa√≠s:* ${hehe.country}
‚Ä¢ *Sigla:* ${hehe.countryCode}
‚Ä¢ *Regi√£o:* ${hehe.regionName}
‚Ä¢ *Sigla Regi√£o:* ${hehe.regionName}
‚Ä¢ *Cidade:* ${hehe.city}
‚Ä¢ *Cep:* ${hehe.zip}
‚Ä¢ *Lat:* ${hehe.lat}
‚Ä¢ *Lon:* ${hehe.lon}
‚Ä¢ *Fuso Hor√°rio:* ${hehe.timezone}
‚Ä¢ *Net:* ${hehe.isp}

üë§ *Usuario:* ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
await sleep(1500)
await bat.sendMessage(m.chat, { location: { degreesLatitude: hehe.lat, degreesLongitude: hehe.lon }, })
} else {
    m.reply(`‚ö†Ô∏è IP N√ÉO ENCONTRADO`)
}

  break

     case 'cep':
    if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùóòùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de CEP, obt√©m informa√ß√µes sobre os logradouros (como nome de rua, avenida, alameda, beco, travessa, pra√ßa etc), nome de bairro, cidade e estado onde ele est√° localizado.\n\nFormato:\n70040010\nou\n70040-010\n\n/cep 70040010\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 4 || query.length > 11) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùóòùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de CEP, obt√©m informa√ß√µes sobre os logradouros (como nome de rua, avenida, alameda, beco, travessa, pra√ßa etc), nome de bairro, cidade e estado onde ele est√° localizado.\n\nFormato:\n70040010\nou\n70040-010\n\n/cep 70040010\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùóòùó£\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de CEP, obt√©m informa√ß√µes sobre os logradouros (como nome de rua, avenida, alameda, beco, travessa, pra√ßa etc), nome de bairro, cidade e estado onde ele est√° localizado.\n\nFormato:\n70040010\nou\n70040-010\n\n/cep 70040010\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                hehee = await fetchJson(`https://cep.awesomeapi.com.br/json/${encodeURIComponent(query)}`)
 
if (hehee.cep != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç *CONSULTA DE CEP* üîç
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚Ä¢ *Cep:* ${hehee.cep}
‚Ä¢ *DDD:* ${hehee.ddd}
‚Ä¢ *Estado:* ${hehee.state}
‚Ä¢ *Tipo de logradouro:* ${hehee.address_type}
‚Ä¢ *Nome do logradouro:* ${hehee.address_name}
‚Ä¢ *Rua:* ${hehee.address}
‚Ä¢ *Bairro:* ${hehee.district}
‚Ä¢ *Cidade:* ${hehee.city}
‚Ä¢ *Latitude:* ${hehee.lat} 
‚Ä¢ *Longitude:* ${hehee.lng} 

üë§ *Usuario:* ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
await sleep(2000)
await bat.sendMessage(m.chat, { location: { degreesLatitude: hehee.lat, degreesLongitude: hehee.lng }, })
} else {
    m.reply(`‚ö†Ô∏è CEP N√ÉO ENCONTRADO`)
}
  break

  break

  case 'bin':
    if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóïùóúùó°\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de BIN, obt√©m os detalhes do emissor (como qual banco ou institui√ß√£o financeira emitiu o cart√£o e onde ele est√° localizado), o tipo, a bandeira e a categoria do cart√£o.\n\nFormato:\n498408\n\n/bin 498408\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 5 || query.length > 11) return m.reply(`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóïùóúùó°\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de BIN, obt√©m os detalhes do emissor (como qual banco ou institui√ß√£o financeira emitiu o cart√£o e onde ele est√° localizado), o tipo, a bandeira e a categoria do cart√£o.\n\nFormato:\n498408\n\n/bin 498408\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
    if(isNaN(query)) return m.reply(`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóïùóúùó°\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta de BIN, obt√©m os detalhes do emissor (como qual banco ou institui√ß√£o financeira emitiu o cart√£o e onde ele est√° localizado), o tipo, a bandeira e a categoria do cart√£o.\n\nFormato:\n498408\n\n/bin 498408\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
   m.reply(`Aguarde ${pushname}, estou consultando os dados...`)
 xx = await fetchJson(`https://bin-check-dr4g.herokuapp.com/api/${encodeURIComponent(query)}`)
 if (xx.data.bin != undefined) {
consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üïµÔ∏è  *CONSULTA REALIZADA*  üïµÔ∏è
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

*INFORMA√á√ïES:*
‚Ä¢ *BIN:* ${xx.data.bin}
‚Ä¢ *ESQUEMA:* ${xx.data.vendor}
‚Ä¢ *TIPO:* ${xx.data.type} 
‚Ä¢ *LEVEL:* ${xx.data.level}
‚Ä¢ *BANCO:* ${xx.data.bank}

*P√ÅIS:*
‚Ä¢ *NOME:* ${xx.data.countryInfo.name} ${xx.data.countryInfo.emoji}
‚Ä¢ *CODIGO:* ${xx.data.countryInfo.code}
‚Ä¢ *DDI:* ${xx.data.countryInfo.dialCode}

‚Ä¢ Usuario: ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
} else {
    m.reply(`‚ö†Ô∏è BIN N√ÉO ENCONTRADA`)
}
 break

                      case 'cpf4':
     if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    // if(!Puxada) throw (`‚ö† - Puxadas foram desativadas pelo meu dono ou estou em manuten√ß√£o.`)
    if(!isPremium2 && !m.isGroup) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
    if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ 4\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf1 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 11 || query.length > 11) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùü≠\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf1 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùü≠\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf1 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                apii = await fetchJson(`https://k-a.herokuapp.com/api/consultas/cpf1/${encodeURIComponent(query)}/&apikey=${apiConsulta}`)
 
if (apii.Rg != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üïµÔ∏è  CONSULTA REALIZADA  üïµÔ∏è
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

 INFORMA√á√ïES DO CPF (base 1):    

‚Ä¢ CPF: ${apii.Cpf}
‚Ä¢ RG: ${apii.Rg}

‚Ä¢ CNS: ${apii.Cns}

‚Ä¢ NOME: ${apii.Nome}
‚Ä¢ DATA DE NASCIMENTO: ${apii.Nascimento}
‚Ä¢ IDADE: ${apii.Idade}
‚Ä¢ SIGNO: ${apii.Signo}
‚Ä¢ SEXO: ${apii.Sexo}
‚Ä¢ COR: ${apii.Cor}
‚Ä¢ TIPO SANGU√çNEO: ${apii.TipoSangu√≠neo}

‚Ä¢ M√ÉE: ${apii.M√£e}
‚Ä¢ PAI: ${apii.Pai}

‚Ä¢ NACIONALIDADE: ${apii.Nacionalidade}
‚Ä¢ CIDADE DE NASCIMENTO: ${apii.CidadeDeNascimento}
‚Ä¢ ESTADO DE NASCIMENTO: ${apii.EstadoDeNascimento}

*ENDERE√áO:*

‚Ä¢ TIPO DE LOGRADOURO: ${apii.TipoDeLogradouro}
‚Ä¢ RUA: ${apii.Logradouro}
‚Ä¢ N√öMERO: ${apii.N√∫mero}
‚Ä¢ COMPLEMENTO: ${apii.Complemento}
‚Ä¢ BAIRRO: ${apii.Bairro}
‚Ä¢ CIDADE: ${apii.Cidade}
‚Ä¢ ESTADO: ${apii.Estado}
‚Ä¢ PA√çS: ${apii.Pa√≠s}
‚Ä¢ CEP: ${apii.Cep}

‚Ä¢ EMAIL: ${apii.Email}
‚Ä¢ TELEFONE: ${apii.Telefone}
‚Ä¢ TIPO: ${apii.Tipo}


‚Ä¢ Usuario: ${pushname}

üîõ BY: ${nBot}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
} else {
    
    m.reply(`‚ö†Ô∏è CPF N√ÉO ENCONTRADO!`)
}
  break


case 'cpf3':
    if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
    if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ 3\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de CPF, retorna os dados do portador. Incluindo dados Tipo 1 + n√∫mero de RG, nome do pai e local de nascimento.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf2 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 11 || query.length > 11) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùüÆ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de CPF, retorna os dados do portador. Incluindo dados Tipo 1 + n√∫mero de RG, nome do pai e local de nascimento.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf2 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùüÆ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de CPF, retorna os dados do portador. Incluindo dados Tipo 1 + n√∫mero de RG, nome do pai e local de nascimento.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf2 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                apii = await fetchJson(`https://k-a.herokuapp.com/api/consultas/cpf2/${encodeURIComponent(query)}/&apikey=${apiConsulta}`)
 
              if (apii.Cpf != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüïµÔ∏è  CONSULTA REALIZADA  üïµÔ∏è\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n INFORMA√á√ïES DO CPF (base 2): \n\n ‚Ä¢ *CPF:* ${apii.Cpf}\n ‚Ä¢ *CNS:* ${apii.Cns}\n ‚Ä¢ *RG:* ${apii.Rg}\n ‚Ä¢ *DATA DE EXPEDI√á√ÉO:* ${apii.DataDeExpedi√ß√£o}\n ‚Ä¢ *ORG√ÉO EXPEDIDOR:* ${apii.Org√£oExpedidor}\n ‚Ä¢ *UF - RG:* ${apii. UfRg}\n\n ‚Ä¢ *T√çTULO ELEITORAL:* ${apii. T√≠tuloEleitoral}\n\n ‚Ä¢ *NOME:* ${apii.Nome}\n ‚Ä¢ *DATA DE NASCIMENTO:* ${apii.Nascimento}\n ‚Ä¢ *IDADE:* ${apii.Idade}\n ‚Ä¢ *SIGNO:* ${apii.Signo}\n\n ‚Ä¢ *SEXO:* ${apii.Sexo}\n ‚Ä¢ *COR:* ${apii.Cor}\n ‚Ä¢ *TIPO SANGU√çNEO:* ${apii.TipoSangu√≠neo}\n\n ‚Ä¢ *M√ÉE:* ${apii.M√£e}\n ‚Ä¢ *PAI:* ${apii.Pai}\n\n ‚Ä¢ *PA√çS DE NASCIMENTO:* ${apii.Pa√≠sDeNascimento}\n ‚Ä¢ *CIDADE DE NASCIMENTO:* ${apii.CidadeDeNascimento}\n ‚Ä¢ *ESTADO DE NASCIMENTO:* ${apii.EstadoDeNascimento}\n\n ‚Ä¢ *LOGRADOURO:* ${apii.Logradouro}\n ‚Ä¢ *N√öMERO:* ${apii.N√∫mero}\n ‚Ä¢ *COMPLEMENTO:* ${apii.Complemento}\n ‚Ä¢ *BAIRRO:* ${apii.Bairro}\n ‚Ä¢ *CIDADE:* ${apii.Cidade}\n ‚Ä¢ *ESTADO:* ${apii.Estado}\n ‚Ä¢ *PA√çS:* ${apii.Pa√≠s}\n ‚Ä¢ *CEP:* ${apii.Cep}\n\n ‚Ä¢ *E-MAIL:* ${apii.Email}\n\n ‚Ä¢ *TELEFONE:* ${apii.Telefone}\n\n\n üë§ *Usuario:* ${pushname}\n\nüîõ BY: ${nBot}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
} else {
    m.reply(`‚ö†Ô∏è CPF N√ÉO ENCONTRADO!`)
}
  break

    case 'cpf2':
    if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
    if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùüØ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf3 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 11 || query.length > 11) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùüØ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf3 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô - ùóßùóúùó£ùó¢ ùüØ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf3 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                apii = await fetchJson(`https://apido.herokuapp.com/cpf3/${encodeURIComponent(query)}/&apikey=${apiConsulta}`)
 
if (apii.consulta != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üïµÔ∏è  CONSULTA REALIZADA  üïµÔ∏è
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${apii.consulta}

 ‚Ä¢ Usuario: ${pushname}

üîõ BY: ${nBot}

 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
m.reply(consulta)
} else {
    m.reply(`TEMPO ESGOTADO NA API, TENTE REPETIR`)
}
                break
			
			
    case 'cpf1':
    case 'cpf':
    if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    if(!isPremium2) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
    if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf4 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('.').join('')
    .split('-').join('')
    .split(' ').join('');
    if(query.length < 11 || query.length > 11) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf4 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóñùó£ùóô\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta simples de CPF, retorna os dados do portador.\n\nFormato:\n01441452001\nou\n014.414.520-01\n\n/cpf4 01441452001\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                apii = await fetchJson(`https://apido.herokuapp.com/cpf4/${encodeURIComponent(query)}/${apiConsulta}`)
 
if (apii.consulta != undefined) {
    consulta = `${apii.consulta}

 ‚Ä¢ Usuario: ${pushname}

üîõ BY: ${nBot}`
m.reply(consulta)
} else {
    m.reply(`TEMPO ESGOTADO NA API, TENTE REPETIR`)
}
                break


    case 'tel':

case 'telefone':
if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
if(!isPremium && !m.isGroup) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

var query = text

.split('+').join('')

.split('-').join('')

.split(' ').join('')

.split('(').join('')

.split(')').join('');

if(query.length < 10) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

if(query.length == 10) {

var resultado3 = query.replace(/(\d{2})/, "$19")

return m.reply(`Identifiquei que esse n√∫mero marcado tem um 9 a menos tente colocar mais ou menos assim:\n\n‚ùå - ERRADO: ${encodeURIComponent(query)}\n‚úÖ - CERTO (ou n√£o): ${resultado3}\n\n Caso eu tenha configurado errado, ajuste manualmente e puxe usando o /tel`);

}

if(query.length > 11) return m.reply('‚ùå - Isso √© um telefone ou um cpf?');

if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

m.reply(`*Ei ${pushname} j√° estou consultando...*`)

await fetchJson(`https://k-a.herokuapp.com/api/consultas/telefone/${encodeURIComponent(query)}/&apikey=${apiConsulta}`).then(async(xx) => {

 

// Bot√£o

let buttons6 = [{buttonId: `${prefix}tel1 ${encodeURIComponent(query)}`, buttonText: {displayText: 'consulta comum üöÄ'}, type: 1}, {buttonId: `${prefix}tel2 ${encodeURIComponent(query)}`, buttonText: {displayText: 'consulta completa üëë'}, type: 1},]

let buttonMessage6 = {text: `üîç ${pushname}, Este n√∫mero foi encontrado\n\nN√∫mero: _~${text}~_\nNome da pessoa: _~${xx.Nome ? xx.Nome : "Erro, Nome n√£o encontrado."}~_`, footer: 'escolha abaixo qual o tipo de consulta voc√™ deseja:', buttons: buttons6, headerType: 2}

bat.sendMessage(m.chat, buttonMessage6)



// Erro

}).catch((err) => {

m.reply(`‚ö†Ô∏è TELEFONE N√ÉO ENCONTRADO`)

console.log(err)

})

break

    case 'tel2':
    case 'telefone2':
    if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    if(!isPremium2 && !m.isGroup) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
   if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
 if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('+').join('')
    .split('-').join('')
    .split(' ').join('')
    .split('(').join('')
    .split(')').join('');
    if(query.length < 10) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(query.length == 10) {
        var resultado3 = query.replace(/(\d{2})/, "$19")
         return m.reply(`Identifiquei que esse n√∫mero marcado tem um 9 a menos tente colocar mais ou menos assim:\n\n‚ùå - ERRADO: ${text}\n‚úÖ - CERTO (ou n√£o): ${resultado3}\n\n Caso eu tenha configurado errado, ajuste manualmente e puxe usando o /tel`);
     }
    if(query.length > 11) return m.reply('‚ùå - Isso √© um telefone ou um cpf?');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                cj = await fetchJson(`https://k-a.herokuapp.com/api/consultas/telefone?numero=${encodeURIComponent(query)}&apikey=${apiConsulta}`)
if (cj[0].Nome != undefined) {
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóóùóò ùóßùóòùóüùóòùóôùó¢ùó°ùóò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
*INFORMA√á√ïES:*
    
‚Ä¢ *TELEFONE:* ${cj[0].Telefone ? cj[0].Telefone : "SEM INFORMA√á√ïES"}
‚Ä¢ *OPERADORA:* ${cj[0].Operadora ? cj[0].Operadora : "SEM INFORMA√á√ïES"}
    
‚Ä¢ *NOME:* ${cj[0].Nome ? cj[0].Nome : "SEM INFORMA√á√ïES"}
‚Ä¢ *CPF/CNPJ:* ${cj[0].CPF ? cj[0].CPF : "SEM INFORMA√á√ïES"}
    
 *ENDERE√áO:*
    
‚Ä¢ *UF:* ${cj[0].UF ? cj[0].UF : "SEM INFORMA√á√ïES"}
‚Ä¢ *RUA:* ${cj[0].Endereco ? cj[0].Endereco : "SEM INFORMA√á√ïES"}
‚Ä¢ *BAIRRO:* ${cj[0].Bairro ? cj[0].Bairro : "SEM INFORMA√á√ïES"}
‚Ä¢ *N√öMERO:* ${cj[0].Numero ? cj[0].Numero : "SEM INFORMA√á√ïES"}
‚Ä¢ *COMPLEMENTO:* ${cj[0].Complemento ? cj[0].Complemento : "SEM INFORMA√á√ïES"}
‚Ä¢ *CEP:* ${cj[0].CEP ? cj[0].CEP : "SEM INFORMA√á√ïES"}


üë§ Usu√°rio: ${pushname}
üîõ BY: ${nBot}`
m.reply(consulta)
} else {
    
    m.reply(`‚ö†Ô∏è TELEFONE N√ÉO ENCONTRADO!`)
}

                break

case 'tel1':
    case 'telefone1':
    if(!isVipGp) throw (`‚ùå ESTE GRUPO N√ÉO √â VIP\n\nüü¢ Para comprar VIP para este grupo, digite:\n\n/planos\n/contratar`)
    if(!isPremium2 && !m.isGroup) throw (`üëë *ESSE COMANDO S√ì PODE SER USADO SE FOR VIP*\n\nüí∞ PARA COMPRAR VIP DIGITE:\n\n/planos\n/contratar`)
if(global.db.data.users[m.sender].limit < 1) return m.reply(mess.endLimit) // Mensagem do antiflood
    db.data.users[m.sender].limit -= 1  // parada do antiflood tbm
    if(!text) throw (`‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
    var query = text
    .split('+').join('')
    .split('-').join('')
    .split(' ').join('')
    .split('(').join('')
    .split(')').join('');
    if(query.length < 10) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    if(query.length == 10) {
        var resultado3 = query.replace(/(\d{2})/, "$19")
         return m.reply(`Identifiquei que esse n√∫mero marcado tem um 9 a menos tente colocar mais ou menos assim:\n\n‚ùå - ERRADO: ${text}\n‚úÖ - CERTO (ou n√£o): ${resultado3}\n\n Caso eu tenha configurado errado, ajuste manualmente e puxe usando o /tel`);
     }
    if(query.length > 11) return m.reply('‚ùå - Isso √© um telefone ou um cpf?');
    if(isNaN(query)) return m.reply('‚òëÔ∏è ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóßùóòùóüùóòùóôùó¢ùó°ùóò\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nConsulta completa de N√∫mero de Telefone, retorna todos \nos dados do dono do Telefone.\n\nFormato:\n51995379721\n\n/telefone 51995379721\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                m.reply(`*Opa ${pushname}, j√° estou consutando, aguarde...\nCaso n√£o retorne nada, nao foi encontrado.`)
                await sleep(10)
                cj = await fetchJson(`https://k-a.herokuapp.com/api/consultas/telefone2?numero=${encodeURIComponent(query)}&apikey=${apiConsulta}`)
    consulta = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîç ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî ùóóùóò ùóßùóòùóüùóòùóôùó¢ùó°ùóò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
*INFORMA√á√ïES:*
    
‚Ä¢ *TELEFONE:* ${encodeURIComponent(query)}
    
‚Ä¢ *NOME:* ${cj[0].Nome ? cj[0].Nome : "SEM INFORMA√á√ïES"}
‚Ä¢ *CPF/CNPJ:* ${cj[0].CPF ? cj[0].CPF : "SEM INFORMA√á√ïES"}
‚Ä¢ *NASCIMENTO:* ${cj[0].Nasc ? cj[0].Nasc : "SEM INFORMA√á√ïES"}

‚Ä¢ *M√ÉE:* ${cj[0].Mae ? cj[0].Mae : "SEM INFORMA√á√ïES"}
‚Ä¢ *PAI:* ${cj[0].Pai ? cj[0].Pai : "SEM INFORMA√á√ïES"}


üë§ Usu√°rio: ${pushname}
üîõ BY: ${nBot}`
m.reply(consulta)
                break

case "consulta": {
        if (!groupAdmins) return enviar("Somente admins podem usar este comando");
        if (!isBotAdmins) return enviar("O bot precisa ser administrador.");
        if (args[0].toLowerCase() === 'on') {
        bat.groupUpdateSubject(from, `ùôÉùôÑùòøùôçùòº ùôéùôÄùòºùôçùòæùôÉ - ùôäùôâ üîé`)
        bat.groupSettingUpdate(from, 'not_announcement');
        bat.sendMessage(m.chat, { text : `‚úÖ CONSULTAS ON` , mentions: participants.map(a => a.id)}, { quoted: m })
        } else if (args[0].toLowerCase() === 'off') {
        bat.groupUpdateSubject(from, `ùôÉùôÑ??ùôçùòº ùôéùôÄùòºùôçùòæùôÉ - ùôäùôÅ?? üîé`)
        bat.groupSettingUpdate(from, 'announcement')
        bat.sendMessage(m.chat, { text : `‚ùå CONSULTAS OFF` , mentions: participants.map(a => a.id)}, { quoted: m })
        }
        }
        break

case 'addprem': 
            if (!m.isGroup) return m.reply(mess.group)
            if (!isCreator) return  m.reply('Somente meu dono pode usar esse comando.')
            if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return 
                uers22v = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+''
          
                pru = '.\n'
            for (let _ of uers22v) {
            pru += `@${_.split('@')[0]}\n`
            }
        
            prem2.push(`${uers22v}`)
            fs.writeFileSync('./lib/premium.json', JSON.stringify(prem2))
            susp = `üëë@${uers22v[0].split('@')[0]} foi adicionado √† lista de usu√°rios premium com sucessoüëë`
            m.reply(`${susp}`)
            break
        
            case 'dellprem': 
            if (!m.isGroup) return m.reply(mess.group)
            if (!isCreator) return  m.reply('Somente meu dono pode usar esse comando.')
        if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return 
        uers22v = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+''
        pru = '.\n'
        for (let _ of uers22v) {
        pru += `@${_.split('@')[0]}\n`
        }
        let dellprem = body.slice(12)
        let positio = prem2.indexOf(dellprem)
        prem2.splice(positio, 1)
        fs.writeFileSync('./lib/premium.json', JSON.stringify(prem2))
        susp = `‚úñ@${uers22v[0].split('@')[0]} foi removido da lista de usu√°rios premium‚úñ`
        m.reply(`${susp}`)   
        break

case 'ping': case 'botstatus': case 'statusbot': {
    const used = process.memoryUsage()
    const cpus = os.cpus().map(cpu => {
        cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
        return cpu
    })
    const cpu = cpus.reduce((last, cpu, _, { length }) => {
        last.total += cpu.total
        last.speed += cpu.speed / length
        last.times.user += cpu.times.user
        last.times.nice += cpu.times.nice
        last.times.sys += cpu.times.sys
        last.times.idle += cpu.times.idle
        last.times.irq += cpu.times.irq
        return last
    }, {
        speed: 0,
        total: 0,
        times: {
            user: 0,
            nice: 0,
            sys: 0,
            idle: 0,
            irq: 0
    }
    })
    let timestamp = speed()
    let latensi = speed() - timestamp
    neww = performance.now()
    oldd = performance.now()
    respon = `üíª Info do Bot\n\nüöÄ Tempo de resposta ${latensi.toFixed(4)} _Segundos_ \n\n‚è≥ Tempo ativo : ${runtime(process.uptime())}`.trim()
    m.reply(respon)
}
break

		// caso queira um menu de template button com imagem, basta apagar o /* do come√ßo e o */ do final do comando.
			
            /*case 'start': case 'menu': case 'iniciar': case 'help': {
                maw = `OL√Å!!\nIREI FACILITAR MUITO SUA VIDA FAZENDO CONSULTAS!\n\n_selecione uma op√ß√£o_`
                let message = await prepareWAMessageMedia({ image: fs.readFileSync('./lib/bat.jpg') }, { upload: bat.waUploadToServer })
                const template = generateWAMessageFromContent(m.chat, proto.Message.fromObject({
                    templateMessage: {
                        hydratedTemplate: {
                            imageMessage: message.imageMessage,
                            hydratedContentText: maw,
                            hydratedButtons: [{
                                urlButton: {
                                    displayText: 'Meu grupo üîÜ',
                                    url: 'https://chat.whatsapp.com/FeBFBymIjuj39NWD94i5Ob'
                                }
                            }, {
                                callButton: {
                                    displayText: 'Meu criador üë®‚Äçüíª',
                                    phoneNumber: '+55 94 9142-4691'
                                }
                            }, {
                                quickReplyButton: {
                                    displayText: 'CONSULTAS üîé',
                                    id: `${prefix}consultas`
                                }
                            }, {
                                quickReplyButton: {
                                    displayText: 'PLANOS üí∞',
                                    id: `${prefix}planos`
                                }  
                            }]
                        }
                    }
                }), { userJid: m.chat, quoted: m })
                bat.relayMessage(m.chat, template.message, { messageId: template.key.id })
                //bat.relayMessage(template.message)
            }
            break*/
            case 'start': case 'menu': case 'iniciar': case 'help':
	const templateButtons = [
    {index: 1, urlButton: {displayText: 'üîÜ Meu grupo', url: 'https://chat.whatsapp.com/FeBFBymIjuj39ND94i5Ob'}},
    {index: 2, urlButton: {displayText: 'üë®‚Äçüíª Meu criador', url: 'https://wa.me/556796005372'}},
    {index: 3, quickReplyButton: {displayText: 'üîé BUSCAS', id: `${prefix}consultas`}},
    {index: 4, quickReplyButton: {displayText: 'üí∞ PLANOS', id: `${prefix}planos`}},
    {index: 6, quickReplyButton: {displayText: 'üü£ MENU COMPLETO', id: `${prefix}menu2`}},
]

const templateMessage = {
    text: `*ùôÉùôÑùòøùôçùòº ùòæùôäùôâùôéùôêùôáùôèùòºùôé üîé*\n\nOL√Å ${pushname}!!\nSOU UM BOT DE CONSULTAS!`,
    footer: 'SELECIONE UMA OP√á√ÉO:',
    templateButtons: templateButtons
}

const sendMsg1 = await bat.sendMessage(m.chat, templateMessage)
break
            default:
                if (budy.startsWith('=>')) {
                    if (!isCreator) return m.reply(mess.owner)
                    function Return(sul) {
                        sat = JSON.stringify(sul, null, 2)
                        bang = util.format(sat)
                            if (sat == undefined) {
                                bang = util.format(sul)
                            }
                            return m.reply(bang)
                    }
                    try {
                        m.reply(util.format(eval(`(async () => { return ${budy.slice(3)} })()`)))
                    } catch (e) {
                        m.reply(String(e))
                    }
                }

                if (budy.startsWith('>')) {
                    if (!isCreator) return m.reply(mess.owner)
                    try {
                        let evaled = await eval(budy.slice(2))
                        if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
                        await m.reply(evaled)
                    } catch (err) {
                        await m.reply(String(err))
                    }
                }

                if (budy.startsWith('$')) {
                    if (!isCreator) return m.reply(mess.owner)
                    exec(budy.slice(2), (err, stdout) => {
                        if(err) return m.reply(err)
                        if (stdout) return m.reply(stdout)
                    })
                }
			
		if (m.chat.endsWith('@s.whatsapp.net') && isCmd) {
                    this.anonymous = this.anonymous ? this.anonymous : {}
                    let room = Object.values(this.anonymous).find(room => [room.a, room.b].includes(m.sender) && room.state === 'CHATTING')
                    if (room) {
                        if (/^.*(next|leave|start)/.test(m.text)) return
                        if (['.next', '.leave', '.stop', '.start', 'Cari Partner', 'Keluar', 'Lanjut', 'Stop'].includes(m.text)) return
                        let other = [room.a, room.b].find(user => user !== m.sender)
                        m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
                            contextInfo: {
                                ...m.msg.contextInfo,
                                forwardingScore: 0,
                                isForwarded: true,
                                participant: other
                            }
                        } : {})
                    }
                    return !0
                }
			
		if (isCmd && budy.toLowerCase() != undefined) {
		    if (m.chat.endsWith('broadcast')) return
		    if (m.isBaileys) return
		    let msgs = global.db.data.database
		    if (!(budy.toLowerCase() in msgs)) return
		    bat.copyNForward(m.chat, msgs[budy.toLowerCase()], true)
		}
        }
        

    } catch (err) {
        m.reply(util.format(err))
    }
}


let file = require.resolve(__filename)
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update ${__filename}`))
	delete require.cache[file]
	require(file)
})
